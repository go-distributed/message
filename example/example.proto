
// Copyright (c) 2013, Vastech SA (PTY) LTD. All rights reserved.
// http://code.google.com/p/gogoprotobuf
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package example;

import "code.google.com/p/gogoprotobuf/gogoproto/gogo.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message A {
    option (gogoproto.face) = true;
    option (gogoproto.goproto_getters) = false;
    optional string Description = 1 [(gogoproto.nullable) = false];
    optional int64 Number = 2 [(gogoproto.nullable) = false];
    optional bytes Id = 3 [(gogoproto.customtype) = "code.google.com/p/gogoprotobuf/test.Uuid", (gogoproto.nullable) = false];
}

message B {
    option (gogoproto.description) = true;
    optional A A = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    repeated bytes G = 2 [(gogoproto.customtype) = "code.google.com/p/gogoprotobuf/test/custom.Uint128", (gogoproto.nullable) = false];
}

message U {
    option (gogoproto.union) = true;
    optional A A = 1;
    optional B B = 2;
}
message PreAccept {
    option (gogoproto.face) = true;
    option (gogoproto.goproto_getters) = false;

    /*
      LeaderId int32
      Replica int32
      Instance int32
      Ballot int32
      Command []byte
      Seq int32
      Deps [5]int32
    */
    required int32 LeaderId = 1 [(gogoproto.nullable) = false];
    optional int32 Replica = 2 [(gogoproto.nullable) = false];
    optional int32 Instance = 3 [(gogoproto.nullable) = false];
    optional int32 Ballot = 4 [(gogoproto.nullable) = false];
    optional bytes Command = 5 [(gogoproto.nullable) = false];
    optional int32 Seq = 6 [(gogoproto.nullable) = false];
    repeated int32 Deps = 7 [(gogoproto.nullable) = false];
    /*optional int32 Deps1 = 7 [(gogoproto.nullable) = false];
    optional int32 Deps2 = 8 [(gogoproto.nullable) = false];
    optional int32 Deps3 = 9 [(gogoproto.nullable) = false];
    optional int32 Deps4 = 10 [(gogoproto.nullable) = false];
    optional int32 Deps5 = 11 [(gogoproto.nullable) = false];*/
    
    /*optional int64 Deps1 = 7 [(gogoproto.nullable) = false];
      optional int64 Deps2 = 8 [(gogoproto.nullable) = false];
      optional int32 Deps3 = 9 [(gogoproto.nullable) = false];*/
}

message  PreAcceptReply {
    /*
      Replica int32
      Instance int32
      OK uint8
      Ballot int32
      Seq int32
      Deps [5]int32
      CommittedDeps [5]int32
    */
    required int32 Replica = 1 [(gogoproto.nullable) = false];
    optional int32 Instance = 2 [(gogoproto.nullable) = false];
    optional uint32 OK = 3 [(gogoproto.nullable) = false]; // since it's Varint, so uint32 and uint8 are actually equal
    optional int32 Ballot = 4 [(gogoproto.nullable) = false];
    optional int32 Seq = 5 [(gogoproto.nullable) = false];
    repeated int32 Deps = 6 [packed=true, (gogoproto.nullable) = false];
    repeated int32 CommittedDeps = 7 [(gogoproto.nullable) = false];
}
